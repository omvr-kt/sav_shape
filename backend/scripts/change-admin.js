#!/usr/bin/env node

const bcryptjs = require('bcryptjs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
require('dotenv').config({ path: path.join(__dirname, '../.env') });

// R√©cup√©rer les arguments de ligne de commande
const args = process.argv.slice(2);

if (args.length < 2) {
  console.log('\nüìò UTILISATION:');
  console.log('================');
  console.log('node scripts/change-admin.js <email> <mot_de_passe>\n');
  console.log('Exemple:');
  console.log('node scripts/change-admin.js admin@monentreprise.fr MonMotDePasse123!\n');
  console.log('‚ö†Ô∏è  Exigences du mot de passe:');
  console.log('   ‚Ä¢ Au moins 8 caract√®res');
  console.log('   ‚Ä¢ Au moins une majuscule');
  console.log('   ‚Ä¢ Au moins une minuscule');
  console.log('   ‚Ä¢ Au moins un chiffre');
  console.log('   ‚Ä¢ Au moins un caract√®re sp√©cial\n');
  process.exit(1);
}

const [newEmail, newPassword] = args;

// Validation email
const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
if (!emailRegex.test(newEmail)) {
  console.log('‚ùå Email invalide');
  process.exit(1);
}

// Validation mot de passe
const errors = [];
if (newPassword.length < 8) errors.push('au moins 8 caract√®res');
if (!/[A-Z]/.test(newPassword)) errors.push('au moins une majuscule');
if (!/[a-z]/.test(newPassword)) errors.push('au moins une minuscule');
if (!/[0-9]/.test(newPassword)) errors.push('au moins un chiffre');
if (!/[!@#$%^&*(),.?":{}|<>]/.test(newPassword)) errors.push('au moins un caract√®re sp√©cial');

if (errors.length > 0) {
  console.log('‚ùå Le mot de passe doit contenir:', errors.join(', '));
  process.exit(1);
}

async function updateAdmin() {
  try {
    // Hasher le mot de passe
    console.log('‚è≥ Hashage du mot de passe...');
    const hashedPassword = await bcryptjs.hash(newPassword, 12);

    // Connexion √† la base de donn√©es
    const dbPath = path.join(__dirname, '../database.sqlite');
    const db = new sqlite3.Database(dbPath);

    // V√©rifier qu'un admin existe
    db.get('SELECT id, email FROM users WHERE role = "admin" LIMIT 1', async (err, currentAdmin) => {
      if (err) {
        console.error('‚ùå Erreur base de donn√©es:', err);
        db.close();
        process.exit(1);
      }

      if (!currentAdmin) {
        console.log('‚ùå Aucun compte administrateur trouv√©');
        db.close();
        process.exit(1);
      }

      console.log(`\nüìß Mise √† jour: ${currentAdmin.email} ‚Üí ${newEmail}`);

      // Mettre √† jour les identifiants
      db.run(
        'UPDATE users SET email = ?, password_hash = ?, updated_at = ? WHERE id = ?',
        [newEmail, hashedPassword, new Date().toISOString(), currentAdmin.id],
        function(err) {
          if (err) {
            console.error('‚ùå Erreur lors de la mise √† jour:', err);
            db.close();
            process.exit(1);
          }

          if (this.changes > 0) {
            console.log('\n‚úÖ Identifiants mis √† jour avec succ√®s!\n');
            console.log('üìù Nouveaux identifiants:');
            console.log('========================');
            console.log(`Email: ${newEmail}`);
            console.log(`Mot de passe: ${newPassword}\n`);
            console.log('‚ö†Ô∏è  IMPORTANT: Notez ces identifiants en lieu s√ªr!');
            console.log('‚ö†Ô∏è  Le mot de passe ne sera plus affich√©.\n');

            // Mettre √† jour le .env si n√©cessaire
            if (newEmail !== currentAdmin.email) {
              const fs = require('fs');
              const envPath = path.join(__dirname, '../.env');
              if (fs.existsSync(envPath)) {
                let envContent = fs.readFileSync(envPath, 'utf8');
                envContent = envContent.replace(/ADMIN_EMAIL=.*/g, `ADMIN_EMAIL=${newEmail}`);
                fs.writeFileSync(envPath, envContent);
                console.log('‚úÖ Fichier .env mis √† jour\n');
              }
            }
          } else {
            console.log('‚ùå Aucune mise √† jour effectu√©e');
          }

          db.close();
        }
      );
    });

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  }
}

updateAdmin();